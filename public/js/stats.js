/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/stats.js":
/*!*******************************!*\
  !*** ./resources/js/stats.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function statisticsChart() {\n  console.log('JS: Connected'); // VUE Standard components\n  // const app = new Vue({\n  //     el: '#app',\n  // });\n  // Input invisibile, value = restaurant_id\n\n  var restaurantId = document.getElementById('d_elem').value;\n  console.log('Restaurant id: ' + restaurantId);\n  var monthsNames12 = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // var myChart;\n  // -- Vue Class --\n\n  var chart = new Vue({\n    el: '#appChart',\n    data: {\n      monthsName: [],\n      monthsOrders: [],\n      year: 0,\n      currentYear: new Date().getFullYear(),\n      myChart: '',\n      ordersNumberList: [] // monthsNames12: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n    },\n    mounted: function mounted() {\n      console.log('VUE Connected');\n      this.get12MonthsData();\n    },\n    methods: {\n      // Funzione di chiamata al controller Statistiche\n      get12MonthsData: function get12MonthsData() {\n        var _this = this;\n\n        if (!this.year) {\n          this.year = this.currentYear;\n        }\n\n        console.log('Year selected:' + this.year);\n        axios.get('/stats/month/' + restaurantId + '/' + this.year, {\n          params: {// Parametri\n          }\n        }).then(function (data) {\n          console.log(data.data); // Contatore mesi con ordini\n\n          var cont = 0;\n          var datas = data.data;\n          _this.monthsName = datas[0];\n          _this.monthsOrders = datas[1];\n          console.log(_this.monthsName, 'API Axios 2'); // Assegnamento valori in lista finale\n\n          for (var i = 0; i < monthsNames12.length; i++) {\n            var month = monthsNames12[i];\n\n            if (month == _this.monthsName[cont]) {\n              _this.ordersNumberList.push(_this.monthsOrders[cont]);\n\n              cont++;\n            } else {\n              _this.ordersNumberList.push(0);\n            }\n          }\n\n          console.log(_this.ordersNumberList);\n          var newOrdersNumberList = _this.ordersNumberList;\n\n          _this.chart12(newOrdersNumberList);\n        })[\"catch\"](function (data) {\n          console.log(data);\n        });\n      },\n      apiChartUpdate: function apiChartUpdate() {\n        var _this2 = this;\n\n        console.log(this.year, 'api 3 year');\n        axios.get('/stats/month/' + restaurantId + '/' + this.year, {\n          params: {// Parametri\n          }\n        }).then(function (data) {\n          console.log(data.data, 'API Axios 3'); // Contatore mesi con ordini\n\n          var cont = 0; // Lista finale con numero ordini per mese (12 mesi)\n\n          _this2.ordersNumberList = [];\n          var datas = data.data;\n          _this2.monthsName = datas[0];\n          _this2.monthsOrders = datas[1];\n          _this2.ordersNumberList = [];\n          monthsNames12 = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n          console.log(_this2.monthsName, _this2.monthsOrders, 'API Axios 3'); // Assegnamento valori in lista finale\n\n          for (var i = 0; i < monthsNames12.length; i++) {\n            var month = monthsNames12[i];\n\n            if (month == _this2.monthsName[cont]) {\n              _this2.ordersNumberList.push(_this2.monthsOrders[cont]);\n\n              cont++;\n            } else {\n              _this2.ordersNumberList.push(0);\n            }\n          }\n\n          console.log(_this2.ordersNumberList, 'API Axios 3 - OrdersNumbList');\n          console.log(_this2.myChart.data.datasets[0].data);\n          _this2.myChart.data.datasets[0].data = _this2.ordersNumberList;\n          console.log(_this2.myChart.data.datasets[0].data);\n\n          _this2.myChart.update();\n        })[\"catch\"](function (error) {\n          console.log(error);\n        });\n        return 'ciao';\n      },\n      // Istanza classe - Grafico statistiche nÂ°ordini per 12 mesi\n      chart12: function chart12(newOrdersNumberList) {\n        var ctx = document.getElementById('myChart');\n        this.myChart = new Chart(ctx, {\n          type: 'line',\n          data: {\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            datasets: [{\n              label: 'Orders per month',\n              data: newOrdersNumberList,\n              backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n              borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n              borderWidth: 1,\n              fill: {\n                target: 'origin',\n                above: 'rgba(255, 0, 0, 0.2)',\n                // Area will be red above the origin\n                below: 'rgb(0, 0, 255)' // And blue below the origin\n\n              }\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            },\n            layout: {\n              padding: 50\n            },\n            plugins: {\n              legend: {\n                labels: {\n                  font: {\n                    // weight: 'bold',\n                    size: 20,\n                    weight: 'normal'\n                  }\n                }\n              }\n            },\n            elements: {\n              point: {\n                radius: 5,\n                hoverRadius: 15\n              },\n              line: {\n                fill: true\n              }\n            }\n          }\n        });\n      },\n      tryIt: function tryIt() {\n        console.log(this.year);\n      },\n      // deleteMonthsChart: function (){\n      //     while( this.myChart.data.labels.length > 0){\n      //         this.myChart.data.labels.pop();\n      //     }\n      //     this.myChart.data.datasets.forEach((dataset) => {\n      //         dataset.data.pop();\n      //     });\n      //     this.myChart.update();\n      // },\n      updateMonthsChart: function updateMonthsChart() {\n        var variabile = this.apiChartUpdate(); // console.log(this.ordersNumberList, monthsNames12);\n\n        console.log(variabile); // console.log(this.myChart.data.datasets[0].data);\n        // this.myChart.data.datasets.data = this.ordersNumberList;\n        // this.myChart.data.labels.push(monthsNames12);\n        // this.myChart.data.datasets.forEach((dataset) => {\n        //     dataset.data.push(this.ordersNumberList);\n        // });\n        // this.myChart.update();\n      }\n    }\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', statisticsChart);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/stats.js\n");

/***/ }),

/***/ 1:
/*!*************************************!*\
  !*** multi ./resources/js/stats.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Boolean\code\proj-final-delivery\resources\js\stats.js */"./resources/js/stats.js");


/***/ })

/******/ });